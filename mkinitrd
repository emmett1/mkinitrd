#!/bin/bash

add_file() {
	# add_file file [ dest ][ mode ]
	local file dest mode
	[ "$1" ] || return
	if [ -f $1 ]; then
		file=$1
	else
		msgwarn "missing file: $1"
		return
	fi
	if [ -L $file ]; then
		add_file $(readlink -f $file)
	fi
	if [ "${file:0:1}" != "/" ]; then
		msgerr "absolute source path needed: $file"
		return
	fi
	if [ "$2" ]; then
		dest="$2"
	else
		dest=${file/\//}
	fi
	if [ "${dest:0:1}" = "/" ]; then
		msgerr "destination path must without leading '/': $dest"
		return
	fi
	mode=${3:-$(stat -c %a "$file")}
	if [ ! "$mode" ]; then
		msgerr "failed get file mode: $file"
		return
	fi	
	install -Dm$mode $file $INITRDDIR/$dest
}

add_binary() {
	# add_binary binary
	local bin lib
	[ "$1" ] || return
	bin=$(type -p $1)
	if [ ! "$bin" ]; then
		msgwarn "missing binary: $1"
		return
	fi
	if [ -x $INITRDDIR/$bin ]; then
		return
	fi
	add_file $bin
	for i in $(ldd $bin | sed "s/\t//" | cut -d " " -f1); do
		case $i in
			linux-vdso.so.1|linux-gate.so.1) continue;;
		esac
		lib=$(PATH=/lib:/lib64:/usr/lib type -p $i)
		if [ ! "$lib" ]; then
			msgwarn "missing library: $i"
			continue
		fi
		if [ -e $INITRDDIR/$lib ]; then
			continue
		fi
		add_file $lib
	done
}

add_module() {
	# add_module modname
	local modname modpath
	[ "$1" ] || return
	if modinfo -k $KERNEL $1 &>/dev/null; then
		modname=$(modinfo -k $KERNEL -F name $1 | cut -d ' ' -f1 | head -n1)
		[ "$modname" = "name:" ] && return 0
		modpath=$(modinfo -k $KERNEL -F filename $1 | cut -d ' ' -f1 | head -n1)
		[ "$modpath" = "name:" ] && return 0
	else
		msgwarn "missing module: $1"
		return
	fi
	[ -f $INITDIR/lib/modules/$KERNEL/kernel/$(basename $modpath) ] && return
	add_file "$modpath" lib/modules/$KERNEL/kernel/$(basename $modpath)
	modinfo -F firmware -k $KERNEL $modname | while read -r line; do
		if [ ! -f /lib/firmware/$line ]; then
			msgwarn "missing firmware for $modname: $line"
		else
			add_file /lib/firmware/$line
		fi
	done
	modinfo -F depends -k $KERNEL $modname | while IFS=',' read -r -a line; do
		for l in ${line[@]}; do
			add_module "$l"
		done
	done
}

finalize_modules() {
	local file
	[ -d $INITRDDIR/lib/modules/$KERNEL/kernel ] || return
	for file in /lib/modules/$KERNEL/modules.*; do
		add_file $file
	done
	awk -F'/' '{ print "kernel/" $NF }' /lib/modules/$KERNEL/modules.order > $INITDIR/lib/modules/$KERNEL/modules.order
	depmod -b $INITRDDIR $KERNEL
}

add_dir() {
	# add_dir source [ target ]
	[ "$1" ] || return
	source=$1
	if [ ! -d $source ]; then
		msgerr "directory not exist: $source"
		return
	fi
	if [ $2 ]; then
		target=$2
	else
		target=$(dirname $source)
	fi
	mkdir -p $INITRDDIR/$target
	cp -a $source $INITRDDIR/$target
}

make_dir() {
	# make_dir path [ mode ]
	local path=$1 mode=${2:-755}
	[ "$path" ] || return
	if [ ${path:0:1} = / ]; then
		msgerr "path should not leading '/': $path"
		return
	fi
	install -dm$mode $INITRDDIR/$path
}

usage() {	
	cat << EOF
Usage:
  $(basename $0) [option] [argument]
  
Options:
  -k <version>  custom kernel version (default: $KERNEL)
  -o <output>   custom output name (default: $INITRAMFS)
  -i <init>     custom init file (default: $INITIN)
  -m <modules>  add extra modules (comma separated)
  -b <binaries  add extra binary (comma separated)
  -f <file>     add extra file (comma separated & absolute path)
  -c <config>   use custom config (default: $CONFIG)
  -A <hook>     add extra hook (comma separated, precedence over -a, -s & HOOKS)
  -a <hook>     add extra hook (comma separated, precedence over -s & after HOOKS)
  -s <hook>     skip hook defined in HOOKS (comma separated)
  -q            quiet mode
  -h            print this help msg

EOF
}

needarg() {
	if [ ! "$1" ]; then
		echo "ERROR: argument is needed for this option!"
		exit 1
	fi
}		

parse_opt() {
	while [ $1 ]; do
		case $1 in
			-k) needarg $2
			    KERNEL=$2
			    shift ;;
			-o) needarg $2
			    OUTPUT=$2
			    shift ;;
			-i) needarg $2
			    INITIN=$2
			    shift ;;
			-c) needarg $2
			    CONFIG=$2
			    shift ;;
			-A) needarg $2
			    IFS=, read -r -a ADDEARLYHOOKS <<< $2
			    shift ;;
			-a) needarg $2
			    IFS=, read -r -a ADDHOOKS <<< $2
			    shift ;;
			-s) needarg $2
			    IFS=, read -r -a SKIPHOOKS <<< $2
			    shift ;;
			-m) needarg $2
			    IFS=, read -r -a ADDMODULES <<< $2
			    shift ;;
			-b) needarg $2
			    IFS=, read -r -a ADDBINARIES <<< $2
			    shift ;;
			-f) needarg $2
			    IFS=, read -r -a ADDFILES <<< $2
			    shift ;;
			-q) QUIET=1 ;;
			-h) usage; exit 0 ;;
			 *) msgerr "Invalid option '$1'"
			    exit 1 ;;
		esac
		shift
	done
}

cleanup() {
	rm -fr "$INITRDDIR"
}

interrupted() {
	cleanup
	exit 1
}

echo() {
	[ "$QUIET" ] && return
	command echo "$*"
}

msg() {
	echo ":: $*"
}

msgwarn() {
	echo "WARNING: $*"
}

msgerr() {
	echo "ERROR: $*"
}

KERNEL=$(uname -r)
DATADIR=/usr/share/mkinitrd
INITIN=init
HOOKDIR=/etc/mkinitrd.d
CONFFILE=/etc/mkinitrd.conf
INITRD=initrd-$KERNEL.img

CPIO=$(type -p cpio)
CPIO=$(type -p bsdcpio)

parse_opt $@

if [ "$UID" != "0" ]; then
	msgerr "need root access!"
	exit 1
fi

if [ ! -d "/lib/modules/$KERNEL" ] ; then
	msgerr "No modules directory named $KERNEL"
	exit 1
fi

if [ ! "$CPIO" ]; then
	msgerr "Either 'cpio' nor 'bsdcpio' not found"
	exit 1
fi

if [ ! -f "$CONFFILE" ]; then
	msgerr "Config file not found: $CONFFILE"
	exit 1
else
	. "$CONFFILE"
fi

if [ "$OUTPUT" ]; then
	if [ $(basename $OUTPUT) != "$OUTPUT" ] && [ ! -d $(dirname $OUTPUT) ]; then
		msgerr "directory '$(dirname $OUTPUT)' for output '$(basename $OUTPUT)' not exist."
		exit 1
	elif [ -d "$OUTPUT" ]; then
		msgerr "'$OUTPUT' is a directory."
		exit 1
	fi
	INITRD="$OUTPUT"
fi

# filter out skip hooks (-s)
if [ "${#SKIPHOOKS[@]}" -gt 0 ] && [ "${#HOOKS[@]}" -gt 0 ]; then
	for s in ${!SKIPHOOKS[@]}; do
		for h in ${!HOOKS[@]}; do
			if [ "${SKIPHOOKS[s]}" = "${HOOKS[h]}" ]; then
				unset 'HOOKS[h]'
				break
			fi
		done
	done
fi

# add extra hooks (-a)
if [ "${#ADDHOOKS[@]}" -gt 0 ]; then
	HOOKS+=(${ADDHOOKS[@]})
fi

# add extra early hooks (-A)
if [ "${#ADDEARLYHOOKS[@]}" -gt 0 ]; then
	ADDEARLYHOOKS+=(${HOOKS[@]})
	HOOKS=(${ADDEARLYHOOKS[@]})
fi

# add extra modules (-m)
if [ "${#ADDMODULES[@]}" -gt 0 ]; then
	MODULES+=(${ADDMODULES[@]})
fi

# add extra files (-f)
if [ "${#ADDFILES[@]}" -gt 0 ]; then
	FILES+=(${ADDFILES[@]})
fi

# add extra binary (-b)
if [ "${#ADDBINARIES[@]}" -gt 0 ]; then
	BINARIES+=(${ADDBINARIES[@]})
fi

trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM

# create a temporary working directory
INITRDDIR=$(mktemp -d /tmp/initrd-work.XXXXXXXXXX)

echo "Generating initrd... "

# make required dirs
for d in dev run sys proc; do
	make_dir $d
done

# add the init file
add_file $DATADIR/$INITIN init 755

# run hook
for hook in ${HOOKS[@]}; do
	# run build hook
	if [ -f "$HOOKDIR/$hook.build" ]; then
		msg "running build hook: $hook"
		. $HOOKDIR/$hook.build
	fi
	# add run & cleanup hook and list the order
	if [ -f "$HOOKDIR/$hook.run" ]; then
		add_file $HOOKDIR/$hook.run
		echo $hook >> $INITRDDIR/runhook.order
	fi
	if [ -f "$HOOKDIR/$hook.cleanup" ]; then
		add_file $HOOKDIR/$hook.cleanup
		echo $hook >> $INITRDDIR/cleanuphook.order
	fi
done

if [ "${#BINARIES[@]}" -gt 0 ]; then
	msg "adding extra binaries..."
	for b in ${BINARIES[@]}; do
		add_binary "$b"
	done
fi

if [ "${#MODULES[@]}" -gt 0 ]; then
	msg "adding extra modules..."
	for m in ${MODULES[@]}; do
		add_module "$m"
	done
fi

if [ "${#FILES[@]}" -gt 0 ]; then
	msg "adding extra files..."
	for f in ${FILES[@]}; do
		add_file "$f"
	done
fi

finalize_modules

( cd $INITRDDIR ; find . | LANG=C $CPIO -o -H newc --quiet | gzip -9 ) > $INITRD

# Remove the temporary directories
cleanup

echo "Generating initrd done: $INITRD ($(du -sh $INITRD | awk '{print $1}'))"

exit 0
