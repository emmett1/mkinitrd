#!/bin/bash

add_file() {
	# add_file file [ dest ][ mode ]
	local file dest mode
	[ "$1" ] || return
	if [ -f $1 ]; then
		file=$1
	else
		echo "missing file: $1"
		return
	fi
	if [ -L $file ]; then
		add_file $(readlink -f $file)
	fi
	if [ "${file:0:1}" != "/" ]; then
		echo "absolute source path needed: $file"
		return
	fi
	if [ "$2" ]; then
		dest="$2"
	else
		dest=${file/\//}
	fi
	if [ "${dest:0:1}" = "/" ]; then
		echo "destination path must without leading '/': $dest"
		return
	fi
	mode=${3:-$(stat -c %a "$file")}
	if [ ! "$mode" ]; then
		echo "failed get file mode: $file"
		return
	fi	
	install -Dm$mode $file $INITRDDIR/$dest
}
	

add_binary() {
	# add_binary binary
	local bin lib
	[ "$1" ] || return
	bin=$(type -p $1)
	if [ ! "$bin" ]; then
		echo "missing bin: $1"
		return
	fi
	if [ -x $INITRDDIR/$bin ]; then
		return
	fi
	add_file $bin
	for i in $(ldd $bin | sed "s/\t//" | cut -d " " -f1); do
		case $i in
			linux-vdso.so.1|linux-gate.so.1) continue;;
		esac
		lib=$(PATH=/lib:/lib64:/usr/lib type -p $i)
		if [ ! "$lib" ]; then
			echo "missing lib: $i"
			continue
		fi
		if [ -e $INITRDDIR/$lib ]; then
			continue
		fi
		add_file $lib
	done
}

add_module() {
	# add_module modname
	local modname modpath
	[ "$1" ] || return
	if modinfo -k $KERNEL $1 &>/dev/null; then
		modname=$(modinfo -k $KERNEL -F name $1 | cut -d ' ' -f1 | head -n1)
		[ "$modname" = "name:" ] && return 0
		modpath=$(modinfo -k $KERNEL -F filename $1 | cut -d ' ' -f1 | head -n1)
		[ "$modpath" = "name:" ] && return 0
	else
		echo "missing module: $1"
		return
	fi
	[ -f $INITDIR/lib/modules/$KERNEL/kernel/$(basename $modpath) ] && return
	add_file "$modpath" lib/modules/$KERNEL/kernel/$(basename $modpath)
	modinfo -F firmware -k $KERNEL $modname | while read -r line; do
		if [ ! -f /lib/firmware/$line ]; then
			echo "missing firmware for $modname: $line"
		else
			add_file /lib/firmware/$line
		fi
	done
	modinfo -F depends -k $KERNEL $modname | while IFS=',' read -r -a line; do
		for l in ${line[@]}; do
			add_module "$l"
		done
	done
}

finalize_modules() {
	local file
	[ -d $INITRDDIR/lib/modules/$KERNEL/kernel ] || return
	for file in /lib/modules/$KERNEL/modules.*; do
		add_file $file
	done
	awk -F'/' '{ print "kernel/" $NF }' /lib/modules/$KERNEL/modules.order > $INITDIR/lib/modules/$KERNEL/modules.order
	depmod -b $INITRDDIR $KERNEL
}

add_dir() {
	# add_dir source [ target ]
	[ "$1" ] || return
	source=$1
	if [ ! -d $source ]; then
		echo "directory not exist: $source"
		return
	fi
	if [ $2 ]; then
		target=$2
	else
		target=$(dirname $source)
	fi
	mkdir -p $INITRDDIR/$target
	cp -a $source $INITRDDIR/$target
}

make_dir() {
	# make_dir path [ mode ]
	local path=$1 mode=${2:-755}
	[ "$path" ] || return
	if [ ${path:0:1} = / ]; then
		echo "path should not leading '/': $path"
		return
	fi
	install -dm$mode $INITRDDIR/$path
}

if [ $1 ] ; then
	KERNEL=$1
else
	KERNEL=$(uname -r)
fi
INITRD=/boot/initrd-$KERNEL.img

if [ ! -d "/lib/modules/$1" ] ; then
	echo "No modules directory named $1"
	exit 1
fi

CPIO=$(type -p cpio)
CPIO=$(type -p bsdcpio)

if [ ! "$CPIO" ]; then
	echo "Either 'cpio' nor 'bsdcpio' not found"
	exit 1
fi

DATADIR=/usr/share/mkinitrd
INITIN=init

# create a temporary working directory
INITRDDIR=$(mktemp -d /tmp/initrd-work.XXXXXXXXXX)

echo "Creating $INITRD... "

# make required dirs
for d in dev run sys proc; do
	make_dir $d
done

# add the init file
add_file $DATADIR/$INITIN init 755

# add required binaries
for b in bash sh cat cp killall ls mkdir mount umount sed awk sleep ln rm setsid \
	uname readlink basename modprobe blkid switch_root depmod kmod lsmod insmod chroot chmod; do
	add_binary $b
done

# add modprobe.d dir
if [ -d /etc/modprobe.d/ ]; then
	add_dir /etc/modprobe.d/
fi

# add required terminfo
add_file /usr/share/terminfo/l/linux

# udev
if [ -f /etc/udev/udev.conf ]; then
	add_file /etc/udev/udev.conf
	add_dir /lib/udev/rules.d
	add_dir /etc/udev/rules.d/
	add_binary udevadm
	add_binary udevd
	add_binary /lib/udev/ata_id
	add_binary /lib/udev/scsi_id
	# Add udevd if not in PATH
	if [ -x /lib/udev/udevd ] ; then
		add_binary /lib/udev/udevd
	elif [ -x /lib/systemd/systemd-udevd ] ; then
		add_binary /lib/systemd/systemd-udevd
	fi
fi

# LVM
if [ $(type -p lvm) ]; then
	for i in lvm dmsetup lvchange lvrename lvrename lvextend lvcreate lvdisplay lvscan \
		pvchange pvck pvcreate pvdisplay pvscan \
		vgchange vgcreate vgscan vgrename vgck; do
		add_binary $i
	done
	add_dir /etc/lvm
fi

# systemd
for dir in /lib/systemd /lib/elogind; do
	if [ -d $dir ]; then
		add_dir $dir
	fi
done

# for livecd
add_binary /lib/udev/cdrom_id
add_binary blockdev
add_binary losetup
add_module cdrom
add_module loop
add_module overlay

# kernel modules
for mod in kernel/crypto kernel/fs kernel/lib kernel/drivers/block kernel/drivers/ata kernel/drivers/md \
	kernel/drivers/firewire kernel/drivers/input kernel/drivers/scsi kernel/drivers/message \
	kernel/drivers/pcmcia kernel/drivers/virtio kernel/drivers/hid kernel/drivers/usb/host kernel/drivers/usb/storage; do
	FTGT="$FTGT /lib/modules/$KERNEL/$mod"
done
for m in $(find $FTGT -type f -name "*.ko*" 2> /dev/null); do
	m=$(echo ${m%*.ko*})
	add_module $(basename $m)
done

finalize_modules

( cd $INITRDDIR ; find . | $CPIO -o -H newc --quiet | gzip -9 ) > $INITRD

# Remove the temporary directories
rm -rf $INITRDDIR

size=$(du -sh $INITRD | awk '{print $1}')
echo "done ($size)"

exit 0
